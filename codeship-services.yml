# In setting up these services, I have tried to minimise how much is loaded into each container for
# each step in order to speed up those individual step build + run times
# - 'validation' service includes a nodejs container, plus the full repo code, and any node_modules
#   dependencies for the package in question
# - 'testing' service is the same as the validation service, but additionally depends on the db
#   service (see below)
# - 'cypress' service includes a base cypress container, plus code and node_module dependencies
#   required by e2e tests in web-frontend
# - the 'db' service provides a postgres db with postgis (and takes a little while to run, thus the
#   splitting of the above services so validation isn't slower than it should be)
# - the 'lastpass' service is simply set up to be able to communicate with LastPass, to fetch
#   environment variables
# - the 'builder' service uses the same image as the 'testing' service, but skips the dependency on
#   the db, and makes the built files available to the later deployment step
# - the 'deployment' service just uses the base alpine image + ssh to log into an ec2 instance and
#   deploy the latest version of the code for each package

validation:
  build:
    dockerfile: tupaia.Dockerfile
  cached: true
  default_cache_branch: 'dev'
  encrypted_dockercfg_path: dockercfg.encrypted

lastpass:
  build:
    dockerfile: lastpass.Dockerfile
  encrypted_env_file: ./lastpass.env.encrypted # lastpass credentials to fetch env vars
  cached: true
  default_cache_branch: 'dev'
  encrypted_dockercfg_path: dockercfg.encrypted
  volumes:
    - ./tupaia:/root/tupaia # make env files available to other containers

testing:
  build:
    dockerfile: tupaia.Dockerfile
  depends_on:
    - db
  cached: true
  default_cache_branch: 'dev'
  encrypted_dockercfg_path: dockercfg.encrypted
  volumes:
    - ./tupaia:/root/tupaia # retrieve env files

e2e:
  build:
    dockerfile: e2e.Dockerfile
  encrypted_env_file: ./e2e.env.encrypted
  cached: true
  default_cache_branch: 'e2e'
  encrypted_dockercfg_path: dockercfg.encrypted
  volumes:
    # see https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-continuous-integration/browser-testing#_chrome_crashing
    - /dev/shm:/dev/shm

db:
  image: mdillon/postgis:10-alpine
  cached: true
  encrypted_dockercfg_path: dockercfg.encrypted

builder:
  build:
    dockerfile: tupaia.Dockerfile
  cached: true
  default_cache_branch: 'dev'
  encrypted_dockercfg_path: dockercfg.encrypted
  volumes:
    - ./tupaia:/root/tupaia # make built files available to deployment service

deployment:
  build:
    dockerfile: deploy-only.Dockerfile
  encrypted_env_file: ./ssh.env.encrypted
  cached: true
  default_cache_branch: 'dev'
  encrypted_dockercfg_path: dockercfg.encrypted
  volumes:
    - ./.ssh:/root/.ssh # persist `id_rsa` file to subsequent steps
    - ./tupaia:/root/tupaia # retrieve files to enable push
