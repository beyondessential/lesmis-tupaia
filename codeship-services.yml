# In setting up these services, I have tried to minimise how much is loaded into each container for
# each step in order to speed up those individual step build + run times
# - 'validation' service includes a nodejs container, plus the full repo code, and any node_modules
#   dependencies for the package in question
# - 'testing' service is the same as the validation service, but additionally depends on the db
#   service (see below)
# - the db service provides a postgres db with postgis (and takes a little while to run, thus the
#   splitting of the above services so validation isn't slower than it should be)
# - the deployment service just uses the base alpine image + ssh to log into
#   an ec2 instance and deploy the latest version of the code for each package

# ----------------------------------
# testing
# ----------------------------------

#validation:
#  build:
#    dockerfile: full-testable-package.Dockerfile
#  cached: true
#  encrypted_dockercfg_path: dockercfg.encrypted
#  default_cache_branch: 'dev'

#testing:
#  build:
#    dockerfile: full-testable-package.Dockerfile
#  depends_on:
#    - db
#  encrypted_env_file: ./ci-env-vars.encrypted # all individual .env files combined and encrypted
#  cached: true
#  encrypted_dockercfg_path: dockercfg.encrypted
#  default_cache_branch: 'dev'
#
#db:
#  image: mdillon/postgis:9.6-alpine
#  cached: true
#  encrypted_dockercfg_path: dockercfg.encrypted
#
## ----------------------------------
## deployment
## ----------------------------------
#
#deployment:
#  build:
#    dockerfile: deploy-only.Dockerfile
#  encrypted_env_file: ./ci-env-vars.encrypted
#  volumes:
#    # mapping to `.ssh` directory ensures that `id_rsa` file persists to subsequent steps
#    - ./.ssh:/root/.ssh
#  cached: true
#  encrypted_dockercfg_path: dockercfg.encrypted
#  default_cache_branch: 'dev'

# ----------------------------------
# image
# ----------------------------------

tupaia:
  build:
    dockerfile: ./Dockerfile
    context: .
  encrypted_env_file: ./ci-env-vars.encrypted
  encrypted_dockercfg_path: dockercfg.encrypted
  cached: true
  default_cache_branch: 'dev'

# ----------------------------------
# e2e testing
# ----------------------------------

#e2e-db-reference:
#  build:
#    dockerfile: postgres.Dockerfile
#  environment:
#    POSTGRES_HOST_AUTH_METHOD: trust
#
#e2e-db-current:
#  build:
#    dockerfile: postgres.Dockerfile
#  environment:
#    POSTGRES_HOST_AUTH_METHOD: trust

#tupaia-clone:
#  build:
#    dockerfile: tupaia-clone.Dockerfile
#  encrypted_env_file: ./ci-env-vars.encrypted
#  volumes:
#    - /tmp/e2e/reference:/tmp/e2e/reference
#
#tupaia-build:
#  build:
#    dockerfile: tupaia-build.Dockerfile
#  volumes:
#    - /tmp/e2e/reference:/home/tupaia

#e2e-setup:
#  build:
#    dockerfile: e2e-setup.Dockerfile
#    encrypted_args_file: build_args.encrypted
#  encrypted_env_file: ./ci-env-vars.encrypted
#  volumes:
#    - /tmp/e2e/reference:/tmp/e2e/reference
#  depends_on:
#    - e2e-db-reference
#    - e2e-db-current

#e2e-tupaia-reference:
#  build:
#    dockerfile: ./Dockerfile
#    context: /tmp/e2e/reference
#  encrypted_env_file: ./ci-env-vars.encrypted
#  volumes:
#    - /tmp/e2e/snapshots:/tmp/e2e/snapshots
#  depends_on:
#    - e2e-setup
#  cached: true
#  encrypted_dockercfg_path: dockercfg.encrypted # TODO: do we need this?
#  default_cache_branch: 'dev'

#e2e-tupaia-current:
#  build:
#    dockerfile: ./Dockerfile
#    context: .
#  encrypted_env_file: ./ci-env-vars.encrypted
#  volumes:
#    - /tmp/e2e/snapshots:/tmp/e2e/snapshots
#  depends_on:
#    - e2e-setup
#  cached: true
#  encrypted_dockercfg_path: dockercfg.encrypted # TODO: do we need this?
#  default_cache_branch: 'dev'

#e2e-runner:
#  build:
#    dockerfile: e2e-runner.Dockerfile
#  add_docker: true
#  encrypted_env_file: ./ci-env-vars.encrypted
#  volumes:
#    - /tmp/e2e/snapshots:/tmp/e2e/snapshots
#  depends_on:
#    - e2e-tupaia-reference